// Generated by CoffeeScript 1.7.1
var Bridge,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Bridge = (function() {
  Bridge.prototype.uid = 0;

  Bridge.prototype.callbacks = {};

  Bridge.bestNativeBridge = null;

  Bridge.getBestNativeBridge = function() {
    var bridgeClass, prioritizedList, _i, _len;
    prioritizedList = [TizenBridge, WebBridge, AndroidBridge, JSCoreBridge, WebsocketBridge];
    if (this.bestNativeBridge == null) {
      for (_i = 0, _len = prioritizedList.length; _i < _len; _i++) {
        bridgeClass = prioritizedList[_i];
        if (this.bestNativeBridge == null) {
          if (bridgeClass.isUsable()) {
            this.bestNativeBridge = new bridgeClass();
          }
        }
      }
    }
    return this.bestNativeBridge;
  };

  function Bridge() {
    this.send = __bind(this.send, this);
    this.nativeCall = __bind(this.nativeCall, this);
    this.message_handler = __bind(this.message_handler, this);
  }

  Bridge.prototype.sendMessageToNative = function(options) {
    if (options == null) {
      options = {};
    }
    throw "ERROR: Bridge#sendMessageToNative not overridden by subclass!";
  };

  Bridge.isUsable = function() {
    throw "ERROR: Bridge.isUsable not overridden by subclass!";
  };

  Bridge.prototype.message_handler = function(e) {
    var msg;
    msg = JSON.parse(e);
    if ((msg != null ? msg.callback : void 0) != null) {
      if (this.callbacks[msg.callback] != null) {
        return this.callbacks[msg.callback].call(msg.parameters, msg.parameters);
      }
    }
  };

  Bridge.prototype.nativeCall = function(options) {
    if (options == null) {
      options = {};
    }
    return this.send({
      method: options.method,
      parameters: options.parameters,
      callbacks: {
        recurring: (function(_this) {
          return function(parameters) {
            var callback, _i, _len, _ref, _results;
            _ref = options.recurringCallbacks;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              callback = _ref[_i];
              if (callback != null) {
                _results.push(callback.call(_this, parameters, options));
              }
            }
            return _results;
          };
        })(this),
        success: (function(_this) {
          return function(parameters) {
            var callback, _i, _len, _ref, _results;
            _ref = options.successCallbacks;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              callback = _ref[_i];
              if (callback != null) {
                _results.push(callback.call(_this, parameters, options));
              }
            }
            return _results;
          };
        })(this),
        failure: (function(_this) {
          return function(parameters) {
            var callback, _i, _len, _ref, _results;
            _ref = options.failureCallbacks;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              callback = _ref[_i];
              if (callback != null) {
                _results.push(callback.call(_this, parameters, options));
              }
            }
            return _results;
          };
        })(this)
      }
    });
  };

  Bridge.prototype.send = function(options) {
    var callbacks, request;
    if (options == null) {
      options = {};
    }
    callbacks = this.storeCallbacks(options);
    request = {
      method: options.method,
      parameters: (options != null ? options.parameters : void 0) != null ? options.parameters : {},
      callbacks: callbacks
    };
    request.parameters["view"] = window.top.AG_VIEW_ID;
    request.parameters["screen"] = window.top.AG_SCREEN_ID;
    request.parameters["layer"] = window.top.AG_LAYER_ID;
    request.parameters["udid"] = window.top.AG_WEBVIEW_UDID;
    return this.sendMessageToNative(JSON.stringify(request));
  };

  Bridge.prototype.storeCallbacks = function(options) {
    var callback_prefix, callbacks;
    if (options == null) {
      options = {};
    }
    if ((options != null ? options.callbacks : void 0) == null) {
      return {};
    }
    callback_prefix = "" + options.method + "_" + (this.uid++);
    callbacks = {};
    if (options.callbacks.recurring != null) {
      callbacks.recurring = "" + callback_prefix + "_recurring";
      this.callbacks[callbacks.recurring] = (function(_this) {
        return function(parameters) {
          return options.callbacks.recurring.call(parameters, parameters);
        };
      })(this);
    }
    if (options.callbacks.success != null) {
      callbacks.success = "" + callback_prefix + "_success";
      this.callbacks[callbacks.success] = (function(_this) {
        return function(parameters) {
          delete _this.callbacks[callbacks.success];
          delete _this.callbacks[callbacks.failure];
          return options.callbacks.success.call(parameters, parameters);
        };
      })(this);
    }
    if (options.callbacks.failure != null) {
      callbacks.failure = "" + callback_prefix + "_fail";
      this.callbacks[callbacks.failure] = (function(_this) {
        return function(parameters) {
          delete _this.callbacks[callbacks.success];
          delete _this.callbacks[callbacks.failure];
          return options.callbacks.failure.call(parameters, parameters);
        };
      })(this);
    }
    return callbacks;
  };

  return Bridge;

})();
